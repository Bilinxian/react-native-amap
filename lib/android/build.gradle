// 第一行必须声明插件
apply plugin: 'com.android.library'

// 在 android 块之前定义自定义方法
def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.newArchEnabled == "true"
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        // 新架构配置
        buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString())

        // 启用新架构的 NDK 配置
        if (isNewArchitectureEnabled()) {
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                            "APP_STL=c++_shared",
                            "NDK_TOOLCHAIN_VERSION=clang",
                            "GENERATED_SRC_DIR=$buildDir/generated/source",
                            "PROJECT_BUILD_DIR=$buildDir",
                            "REACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
                            "REACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                }
            }
        }
    }

    // 新架构的外部原生构建配置
    if (isNewArchitectureEnabled()) {
        externalNativeBuild {
            ndkBuild {
                path "src/main/jni/Android.mk"
            }
        }
    }

    // 编译选项
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 构建类型
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 资源排除配置
    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
        exclude "**/libc++_shared.so"
        exclude "**/libfbjni.so"
        exclude "**/libjsi.so"
        exclude "**/libfolly_runtime.so"
        exclude "**/libglog.so"
        exclude "**/libreactnativejni.so"
    }

    // 源代码集配置
    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                        "src/newarch",
                        "$buildDir/generated/source/codegen/java"
                ]
            } else {
                java.srcDirs += ["src/oldarch"]
            }
        }
    }

    //  lint 配置
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
}

// 依赖配置
dependencies {
    // React Native 依赖
    implementation "com.facebook.react:react-android:+"

    // Hermes 引擎
    implementation "com.facebook.react:hermes-android:+"

    // 高德地图 SDK - 使用稳定版本
    implementation 'com.amap.api:3dmap:10.0.600'
    implementation 'com.amap.api:location:6.2.0'
    implementation 'com.amap.api:search:9.5.0'

    // Fresco 图片加载
    implementation 'com.facebook.fresco:fresco:2.6.0'

    // 新架构 Fabric 依赖
    if (isNewArchitectureEnabled()) {
        // 这些依赖通常由 React Native 自动提供
        // implementation "com.facebook.react:fabricjni:0.72.0"
    }
}

// 新架构代码生成任务
if (isNewArchitectureEnabled()) {
    tasks.register('generateCodegenArtifactsFromSchema') {
        doLast {
            def nodeCommand = "node"
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                nodeCommand = "node.exe"
            }

            def command = [
                    nodeCommand,
                    "../node_modules/react-native/scripts/generate-codegen-artifacts.js",
                    "-p", ".",
                    "-o", "$buildDir/generated/source/codegen/java",
                    "-e", "true",
                    "--libraryName", "react-native-amap3d"
            ]

            def process = command.execute(null, projectDir)
            process.waitForProcessOutput(System.out, System.err)
            if (process.exitValue() != 0) {
                throw new GradleException("Failed to generate codegen artifacts")
            }
        }
    }

    // 在预构建阶段运行代码生成
    preBuild.dependsOn generateCodegenArtifactsFromSchema
}

// 仓库配置
repositories {
    google()
    mavenCentral()

    // 高德地图仓库
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://maven.aliyun.com/repository/public/' }
}
